#!/usr/bin/python
import os

virtenv = ''
if 'APPDIR' in os.environ:
  virtenv = os.environ['APPDIR'] + '/virtenv/'
os.environ['PYTHON_EGG_CACHE'] = os.path.join(virtenv, 'lib/python2.6/site-packages')
virtualenv = os.path.join(virtenv, 'bin/activate_this.py')
try:
    execfile(virtualenv, dict(__file__=virtualenv))
except IOError:
    pass
#
# IMPORTANT: Put any additional includes below this line.  If placed above this
# line, it's possible required libraries won't be in your searchable path
# 

def application(environ, start_response):

	ctype = 'text/plain'
	if environ['PATH_INFO'] == '/health':
		response_body = "1"
	elif environ['PATH_INFO'] == '/env':
		response_body = ['%s: %s' % (key, value)
                    for key, value in sorted(environ.items())]
		response_body = '\n'.join(response_body)
	else:
		ctype = 'text/html'
		response_body = '''<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Hello</title>
  <style>
  html { 
  background: black; 
  }
  body {
    background: #333;
    background: -webkit-linear-gradient(top, #222, #666);
    background: -o-linear-gradient(top, #222, #666);
    background: -moz-linear-gradient(top, #222, #666);
    background: linear-gradient(top, #222, #666);
    color: white;
    font-family: "Helvetica Neue",Helvetica,"Liberation Sans",Arial,sans-serif;
    width: 40em;
    margin: 0 auto;
    padding: 3em;
  }
  a {
    color: white;
  }

  h1 {
    text-transform: capitalize;
    -moz-text-shadow: -1px -1px 0 black;
    -webkit-text-shadow: 2px 2px 2px black;
    text-shadow: -1px -1px 0 black;
    box-shadow: 1px 2px 2px rgba(0, 0, 0, 0.5);
    background: #C00;
    width: 22.5em;
    margin: 1em -2em;
    padding: .3em 0 .3em 1.5em;
    position: relative;
  }
  h2 { 
    margin: 2em 0 .5em;
    border-bottom: 1px solid #999;
  }
  pre {
    background: black;
    padding: 1em 0 0;
    -webkit-border-radius: 1em;
    -moz-border-radius: 1em;
    border-radius: 1em;
    color: #9cf;
  }
  </style>
</head>
<body>'''
		response_body += '''  <h1>Hello</h1>
  <p>Place your application here</p>
  <h2>What's next?</h2>
  <p>Place your application here</p>
'''
                import tempfile
                d = tempfile.mkdtemp()
                import shutil
                import os
                shutil.copy(os.path.join(os.environ['OPENSHIFT_REPO_DIR'], 'data', 'redbot'), d)
		os.mkdir(os.path.join(d, 'strategie1'))
                shutil.copy(os.path.join(os.environ['OPENSHIFT_REPO_DIR'], 'data', 'strilej'), os.path.join(d, 'strategie1'))
		os.mkdir(os.path.join(d, 'strategie2'))
                shutil.copy(os.path.join(os.environ['OPENSHIFT_REPO_DIR'], 'data', 'strilej'), os.path.join(d, 'strategie2'))
		os.mkdir(os.path.join(d, 'replay'))
		import subprocess
                # Run command with arguments and return its output as a byte string.
		# If the return code was non-zero it raises a CalledProcessError.
		# The CalledProcessError object will have the return code in the
		# returncode attribute and any output in the output attribute.
                p = subprocess.Popen(["ls", "-l", d], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=False)
                (stdoutdata, stderrdata) = p.communicate()
                p.wait()
		response_body += '<pre>%s</pre>' % stdoutdata
                os.chdir(d)
                response_body += '<h2>Play: %s</h2>' % d
                p = subprocess.Popen(["./redbot", "-b", "replay", "strategie1/strilej", "strategie2/strilej"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=False)
                (stdoutdata, stderrdata) = p.communicate()
                p.wait()
		response_body += '<pre>%s</pre>' % stdoutdata
                shutil.rmtree(d)
		response_body += '''</body>
</html>'''

	status = '200 OK'
	response_headers = [('Content-Type', ctype), ('Content-Length', str(len(response_body)))]
	start_response(status, response_headers)
	return [response_body]

#
# Below for testing only
#
if __name__ == '__main__':
	from wsgiref.simple_server import make_server
	httpd = make_server('localhost', 8080, application)
	# Wait for a single request, serve it and quit.
	httpd.handle_request()

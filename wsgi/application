#!/usr/bin/python
import os

virtenv = ''
if 'APPDIR' in os.environ:
  virtenv = os.environ['APPDIR'] + '/virtenv/'
os.environ['PYTHON_EGG_CACHE'] = os.path.join(virtenv, 'lib/python2.6/site-packages')
virtualenv = os.path.join(virtenv, 'bin/activate_this.py')
try:
  execfile(virtualenv, dict(__file__=virtualenv))
except IOError:
  pass
#
# IMPORTANT: Put any additional includes below this line.  If placed above this
# line, it's possible required libraries won't be in your searchable path
# 

import os
import sys
import datetime
import traceback
import io

sys.path.append('./libs')
import pages
import path

def application(environ, start_response):

  ctype = 'text/html'
  status = '200 OK'
  response_body = ''
  response_headers_added = []
  #print environ
  
  try:
    if environ['PATH_INFO'] == '/menu':
      if pages.is_authorized(environ):
        response_body += pages.menu(environ)
      else:
        status = '401 Authorization Required'
        response_headers_added.append(('WWW-Authenticate', 'Basic realm="RedBot: Authenticated section"'))
    elif environ['PATH_INFO'] == '/':
      response_body += pages.main(environ)
    elif environ['PATH_INFO'].startswith('/game'):
      if pages.is_authorized(environ):
        uri = environ['PATH_INFO'].split('/')
        if environ['PATH_INFO'] == '/game':
          response_body += pages.game(environ)
        elif environ['PATH_INFO'] == '/game/new':
          g = pages.game_new(environ)
          status = '303 See Other'
          response_headers_added.append( \
              ('Location', '/game/show/%s' % g.gameid))
        elif environ['PATH_INFO'].startswith('/game/show/'):
          response_body += pages.game_show(environ)
        else:
          raise Exception('Was not able to determine if you want me to create new game of show current one')
      else:
        status = '401 Authorization Required'
        response_headers_added.append(('WWW-Authenticate', 'Basic realm="RedBot: Authenticated section"'))
    elif environ['PATH_INFO'].startswith('/user'):
      if environ['PATH_INFO']==('/user'):
        response_body+=pages.user(environ)
      elif environ['PATH_INFO']==('/user/new'):
        response_body+=pages.user_new(environ)
      else:
          raise Exception('Was not able to determine if you want me to create new user or delete other user.')
    elif environ['PATH_INFO'].startswith('/strat'):
      if pages.is_authorized(environ):
        if environ['PATH_INFO']==('/strat'):
          response_body+=pages.strategy(environ)
        elif environ['PATH_INFO']==('/strat/new'):
          response_body+=pages.strategy_new(environ)
        else:
            raise Exception('Was not able to determine if you want me to create new user or delete other user.')
      else:
        status = '401 Authorization Required'
        response_headers_added.append(('WWW-Authenticate', 'Basic realm="RedBot: Authenticated section"'))
    else:
      raise Exception('Unknown path')
  except:
    response_body += "<h2>Error occured at %s</h2>\n" % datetime.datetime.now()
    response_body += "<pre>\n"
    tb = traceback.format_exc()
    response_body += tb
    print tb   # we want it in error_log as well
    response_body += "</pre>\n"
    status = '500 Internal Server Error'

  response_headers = [('Content-Type', ctype), ('Content-Length', str(len(response_body)))] + response_headers_added
  start_response(status, response_headers)
  return [response_body]

#
# Below for testing only
#
if __name__ == '__main__':
  from wsgiref.simple_server import make_server
  httpd = make_server('localhost', 8080, application)
  httpd.serve_forever()
